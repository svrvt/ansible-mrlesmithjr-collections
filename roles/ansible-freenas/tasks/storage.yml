---
- name: storage | Capturing Disks
  uri:
    force_basic_auth: true
    method: GET
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 200
    url: "{{ freenas_api_url + '/storage/disk/' }}"
    user: "{{ freenas_user }}"
  register: freenas_disks_found
  delegate_to: localhost
  tags:
    - freenas_storage

# We run first time to collect current state
- name: storage | Capturing Initial Volumes
  uri:
    force_basic_auth: true
    method: GET
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 200
    url: "{{ freenas_api_url + '/storage/volume/' }}"
    user: "{{ freenas_user }}"
  register: freenas_volumes
  delegate_to: localhost
  tags:
    - freenas_storage

# We run first time to collect current state
- name: storage | Capturing Initial Datasets
  uri:
    force_basic_auth: true
    method: GET
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 200
    url: "{{ freenas_api_url + '/storage/dataset/' }}"
    user: "{{ freenas_user }}"
  register: freenas_datasets
  delegate_to: localhost
  tags:
    - freenas_storage

- name: storage | Capturing Initial ZVOLs
  uri:
    force_basic_auth: true
    method: GET
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 200
    url: "{{ freenas_api_url + '/storage/volume/' + item['id']|string + '/zvols/' }}"
    user: "{{ freenas_user }}"
  delegate_to: localhost
  register: freenas_zvols
  with_items: "{{ freenas_volumes['json'] }}"
  tags:
    - freenas_storage

# We run first time to collect current state
- name: storage | Setting Initial Fact For Storage Config
  set_fact:
    freenas_storage_config: "{{ lookup('template', 'storage_config.yaml.j2') }}"
  tags:
    - freenas_storage

- name: storage | Displaying Storage Config
  debug:
    var: freenas_storage_config
  tags:
    - freenas_storage

- name: storage | Updating Disk Configurations
  uri:
    body: "{{ item['config'] }}"
    body_format: json
    force_basic_auth: true
    method: PUT
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 200
    url: "{{ freenas_api_url + '/storage/disk/' + item['id']|string + '/' }}"
    user: "{{ freenas_user }}"
  delegate_to: localhost
  with_items: "{{ freenas_storage_config['update_disks'] }}"
  tags:
    - freenas_storage

- name: storage | Creating Volumes
  uri:
    body: "{{ item }}"
    body_format: json
    force_basic_auth: true
    method: POST
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 201
    url: "{{ freenas_api_url + '/storage/volume/' }}"
    user: "{{ freenas_user }}"
  delegate_to: localhost
  with_items: "{{ freenas_storage_config['create_volumes'] }}"
  tags:
    - freenas_storage

- name: storage | Deleting Volumes
  uri:
    body: "{{ item['config'] }}"
    body_format: json
    force_basic_auth: true
    method: DELETE
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 204
    url: "{{ freenas_api_url + '/storage/volume/' + item['id']|string + '/' }}"
    user: "{{ freenas_user }}"
  delegate_to: localhost
  with_items: "{{ freenas_storage_config['delete_volumes'] }}"
  tags:
    - freenas_storage

# We run second time to collect current state
- name: storage | Capturing Volumes (After volume creations)
  uri:
    force_basic_auth: true
    method: GET
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 200
    url: "{{ freenas_api_url + '/storage/volume/' }}"
    user: "{{ freenas_user }}"
  register: freenas_volumes
  delegate_to: localhost
  tags:
    - freenas_storage

# We run second time to collect current state
- name: storage | Updating Fact For Storage Config (After volume creations)
  set_fact:
    freenas_storage_config: "{{ lookup('template', 'storage_config.yaml.j2') }}"
  tags:
    - freenas_storage

- name: storage | Displaying Storage Config
  debug:
    var: freenas_storage_config
  tags:
    - freenas_storage

- name: storage | Creating Datasets
  uri:
    body: "{{ item['config'] }}"
    body_format: json
    force_basic_auth: true
    method: POST
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 201
    url: "{{ freenas_api_url + '/storage/dataset/' + item['path'] + '/' }}"
    user: "{{ freenas_user }}"
  delegate_to: localhost
  with_items: "{{ freenas_storage_config['create_datasets'] }}"
  tags:
    - freenas_storage

# We run second time to collect current state
- name: storage | Capturing Datasets (After dataset creations)
  uri:
    force_basic_auth: true
    method: GET
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 200
    url: "{{ freenas_api_url + '/storage/dataset/' }}"
    user: "{{ freenas_user }}"
  register: freenas_datasets
  delegate_to: localhost
  tags:
    - freenas_storage

# We run third time to collect current state
- name: storage | Updating Fact For Storage Config (After dataset creations)
  set_fact:
    freenas_storage_config: "{{ lookup('template', 'storage_config.yaml.j2') }}"
  tags:
    - freenas_storage

- name: storage | Displaying Storage Config
  debug:
    var: freenas_storage_config
  tags:
    - freenas_storage

- name: storage | Creating ZVOLs
  uri:
    body: "{{ item['config'] }}"
    body_format: json
    force_basic_auth: true
    method: POST
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 202
    url: "{{ freenas_api_url + '/storage/volume/' + item['pool'] + '/zvols/' }}"
    user: "{{ freenas_user }}"
  delegate_to: localhost
  with_items: "{{ freenas_storage_config['create_zvols'] }}"
  tags:
    - freenas_storage

# We run third time to collect current state
- name: storage | Capturing Datasets (After ZVOL creations)
  uri:
    force_basic_auth: true
    method: GET
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 200
    url: "{{ freenas_api_url + '/storage/dataset/' }}"
    user: "{{ freenas_user }}"
  register: freenas_datasets
  delegate_to: localhost
  tags:
    - freenas_storage

- name: storage | Capturing ZVOLs (After ZVOL creations)
  uri:
    force_basic_auth: true
    method: GET
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 200
    url: "{{ freenas_api_url + '/storage/volume/' + item['id']|string + '/zvols/' }}"
    user: "{{ freenas_user }}"
  delegate_to: localhost
  register: freenas_zvols
  with_items: "{{ freenas_volumes['json'] }}"
  tags:
    - freenas_storage

# We run fourth time to collect current state
- name: storage | Updating Fact For Storage Config (After dataset creations)
  set_fact:
    freenas_storage_config: "{{ lookup('template', 'storage_config.yaml.j2') }}"
  tags:
    - freenas_storage

- name: storage | Displaying Storage Config
  debug:
    var: freenas_storage_config
  tags:
    - freenas_storage

- name: storage | Updating Datasets
  uri:
    body: "{{ item['config'] }}"
    body_format: json
    force_basic_auth: true
    method: PUT
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 200
    url: "{{ freenas_api_url + '/storage/dataset/' + item['path'] + '/' + item['dataset_name'] + '/' }}"
    user: "{{ freenas_user }}"
  delegate_to: localhost
  with_items: "{{ freenas_storage_config['update_datasets'] }}"
  tags:
    - freenas_storage

- name: storage | Updating ZVOLs
  uri:
    body: "{{ item['config'] }}"
    body_format: json
    force_basic_auth: true
    method: PUT
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 201
    url: "{{ freenas_api_url + '/storage/volume/' + item['pool'] + '/zvols/' + item['name'] + '/' }}"
    user: "{{ freenas_user }}"
  delegate_to: localhost
  with_items: "{{ freenas_storage_config['update_zvols'] }}"
  tags:
    - freenas_storage

- name: storage | Deleting Datasets
  uri:
    force_basic_auth: true
    method: DELETE
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 204
    url: "{{ freenas_api_url + '/storage/dataset/' + item['path'] + '/' + item['dataset_name'] + '/' }}"
    user: "{{ freenas_user }}"
  delegate_to: localhost
  with_items: "{{ freenas_storage_config['delete_datasets'] }}"
  tags:
    - freenas_storage

- name: storage | Deleting ZVOLs
  uri:
    force_basic_auth: true
    method: DELETE
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 204
    url: "{{ freenas_api_url + '/storage/volume/' + item['pool'] + '/zvols/' + item['name'] + '/' }}"
    user: "{{ freenas_user }}"
  delegate_to: localhost
  with_items: "{{ freenas_storage_config['delete_zvols'] }}"
  tags:
    - freenas_storage

- name: storage | Setting Mountpoint Permissions
  uri:
    body: "{{ item }}"
    body_format: json
    force_basic_auth: true
    method: PUT
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 201
    url: "{{ freenas_api_url + '/storage/permission/' }}"
    user: "{{ freenas_user }}"
  delegate_to: localhost
  with_items: "{{ freenas_storage_config['permissions'] }}"
  tags:
    - freenas_storage
# TODO: Create logic to determing if snapshot task already exists
# - name: storage | Creating Snapshot Tasks
#   uri:
#     body: "{{ item[1]['config'] }}"
#     body_format: json
#     force_basic_auth: true
#     method: POST
#     password: "{{ freenas_password }}"
#     return_content: true
#     status_code: 201
#     url: "{{ freenas_api_url + '/storage/task/' }}"
#     user: "{{ freenas_user }}"
#   delegate_to: localhost
#   register: freenas_datasets_created
#   with_subelements:
#     - "{{ freenas_storage }}"
#     - snapshot_tasks
#   when: >
#     item[1] is defined and
#     item[1]['state'] == "present"
#   tags:
#     - freenas_storage

# - name: storage | Capturing Snapshot Tasks
#   uri:
#     force_basic_auth: true
#     method: GET
#     password: "{{ freenas_password }}"
#     return_content: true
#     status_code: 200
#     url: "{{ freenas_api_url + '/storage/task/' }}"
#     user: "{{ freenas_user }}"
#   delegate_to: localhost
#   register: freenas_snapshot_tasks
#   tags:
#     - freenas_storage

# - name: storage | Displaying Captured Snapshot Tasks
#   debug:
#     var: freenas_snapshot_tasks['json']
#   tags:
#     - freenas_storage

- name: storage | Capturing Snapshots
  uri:
    force_basic_auth: true
    method: GET
    password: "{{ freenas_password }}"
    return_content: true
    status_code: 200
    url: "{{ freenas_api_url + '/storage/snapshot/' }}"
    user: "{{ freenas_user }}"
  delegate_to: localhost
  register: freenas_snapshots
  tags:
    - freenas_storage

- name: storage | Displaying Captured Snapshots
  debug:
    var: freenas_snapshots['json']
  tags:
    - freenas_storage
