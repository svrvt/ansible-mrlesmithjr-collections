---
- name: ssl | Installing Python Modules
  ansible.builtin.pip:
    name:
      - pyOpenSSL
    state: present
  become: true
  register: result
  until: result is successful
  when: haproxy_ssl.generate_keys|bool

- name: ssl | Ensuring SSL Keys Folders Exist
  ansible.builtin.file:
    path: "{{ item | dirname }}"
    state: directory
    mode: u=rwx,g=rx,o=rx
  become: true
  loop:
    - "{{ haproxy_ssl.private_key_file }}"
    - "{{ haproxy_ssl.public_key_file }}"
  when: haproxy_ssl.generate_keys|bool

- name: ssl | Generating SSL Private Key
  community.crypto.openssl_privatekey:
    force: "{{ haproxy_ssl.regenerate_keys }}"
    path: "{{ haproxy_ssl.private_key_file }}"
    size: "{{ haproxy_ssl.private_key_size }}"
    state: present
    type: "{{ haproxy_ssl.private_key_type }}"
  become: true
  register: _haproxy_ssl_priv_key
  when: >
    haproxy_ssl.generate_keys|bool and
    (not haproxy_ha or
      (haproxy_ha and
        inventory_hostname == haproxy_ha_primary ))

# This module is included in Ansible 2.4 so for now it is included in library/
- name: ssl | Generating SSL CSR
  openssl_csr:
    force: "{{ haproxy_ssl.regenerate_keys | bool }}"
    commonName: "{{ inventory_hostname }}"
    path: "{{ haproxy_ssl.csr_key_file }}"
    privatekey_path: "{{ haproxy_ssl.private_key_file }}"
  become: true
  register: _haproxy_ssl_csr
  when: >
    haproxy_ssl.generate_keys|bool and
    (not haproxy_ha or
      (haproxy_ha and
        inventory_hostname == haproxy_ha_primary ))

- name: ssl | Generating SSL Public Key # noqa no-handler no-changed-when
  ansible.builtin.command: >
    openssl req
    -x509
    -days {{ haproxy_ssl.public_key_valid_days }}
    -key {{ haproxy_ssl.private_key_file }}
    -in {{ haproxy_ssl.csr_key_file }}
    -out {{ haproxy_ssl.public_key_file }}
  become: true
  when: >
    haproxy_ssl.generate_keys|bool and
    (not haproxy_ha or
      (haproxy_ha and
        inventory_hostname == haproxy_ha_primary )) and
    (_haproxy_ssl_priv_key.changed or
    _haproxy_ssl_csr.changed)

# We capture the ha primary private key in order to sync to all other load
# balancers. This will ensure that all load balancers use the same key for SSL.
- name: ssl | Capturing Private SSL Key On Primary
  ansible.builtin.slurp:
    src: "{{ haproxy_ssl.private_key_file }}"
  become: true
  register: _haproxy_ssl_priv_key_
  when: >
    haproxy_ssl.generate_keys|bool and
      ((haproxy_ha and
        inventory_hostname == haproxy_ha_primary) or
        not haproxy_ha)

# We capture the ha primary public key in order to sync to all other load
# balancers. This will ensure that all load balancers use the same key for SSL.
- name: ssl | Capturing Public SSL Key On Primary
  ansible.builtin.slurp:
    src: "{{ haproxy_ssl.public_key_file }}"
  become: true
  register: _haproxy_ssl_pub_key_
  when: >
    haproxy_ssl.generate_keys|bool and
      ((haproxy_ha and
        inventory_hostname == haproxy_ha_primary) or
        not haproxy_ha)

- name: ssl | Creating Primary SSL Bundle
  ansible.builtin.template:
    src: bundle.j2
    dest: "{{ haproxy_ssl.bundled_cert }}"
    mode: u=rw,g=r,o=r
  become: true
  when: >
    haproxy_ssl.generate_keys|bool and
      ((haproxy_ha and
        inventory_hostname == haproxy_ha_primary) or
        not haproxy_ha|bool)

# We now sync the ha primary private key to all load balancers. This will ensure
# that all load balancers are configured to use the same key for SSL.
- name: ssl | Syncing Primary SSL Private Key
  ansible.builtin.template:
    src: key.j2
    dest: "{{ haproxy_ha_key_file_prefix }}-key.pem"
    mode: u=rw,g=r,o=r
  become: true
  when:
    - haproxy_ssl.generate_keys|bool
    - haproxy_ha|bool

# We now sync the ha primary public key to all load balancers. This will ensure
# that all load balancers are configured to use the same key for SSL.
- name: ssl | Syncing Primary SSL Public Key
  ansible.builtin.template:
    src: cert.j2
    dest: "{{ haproxy_ha_key_file_prefix }}-cert.pem"
    mode: u=rw,g=r,o=r
  become: true
  when:
    - haproxy_ssl.generate_keys|bool
    - haproxy_ha|bool

# We now sync the ha primary bundle to all load balancers. This will ensure
# that all load balancers are configured to use the same SSL bundled keys.
- name: ssl | Syncing Primary SSL Bundle
  ansible.builtin.template:
    src: bundle.j2
    dest: "{{ haproxy_ssl.bundled_cert }}"
    mode: u=rw,g=r,o=r
  become: true
  when:
    - haproxy_ssl.generate_keys|bool
    - haproxy_ha|bool
